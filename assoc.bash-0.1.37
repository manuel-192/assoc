#!/bin/bash
#
# $Id: assoc.bash,v 1.37 2018/02/21 20:51:37 me Exp $
#
# MS-like assoc functionality.
#
# 'source' this file (e.g. in ~/.bashrc) and use function 'assoc'.
#
# Variables to configure:
# ASSOC_DB                 (default: $HOME/.config/assoc/db)
# ASSOC_PROG_FOR_EXTLESS   (default: emacs)
# ASSOC_CASE_SENSITIVE     (default: no)
#
# EDITOR                   (default: emacs)
# SYSOPEN                  (default: exo-open)

if [ 0 -eq 1 ] ; then
    Debug()   { printf "$@" ; }
    Debugln() { echo   "$@" ; }
else
    Debug()   { : ; }
    Debugln() { : ; }
fi

echo2()     { echo "$@" >&2 ; }
printf2()   {
    local fmt="$1"  # always needs fmt arg!
    shift
    printf "$fmt" "$@" >&2
}

_AssocProgExist()
{
    local prog="$1"  # program with possible options (e.g. "qtcreator -client")
    local prog2

    if [ "$prog" != "" ] ; then
        # remove possible options for the existence test
        prog2=${prog%% -*}         # remove options (note that tabs are not recognized!)
        prog2=$(echo $prog2)       # remove leading/trailing spaces

        # now $prog2 is the actual program name

        if [ "$(which "$prog2" 2>/dev/null)" != "" ] ; then
            echo "$prog"   # program found OK
            return
        fi

        echo "[unknown]"   # program is not installed, or is not in the PATH
    else
        echo ""            # program is not given
    fi
}

_AssocAsk()
{
    # No association for this ext yet. Ask association from the user.

    local db="$1"
    local fileext="$2"
    local file="$3"

    local prog
    local answer

    read -p "No association found for extension '$fileext'. Give program: " prog
    while true
    do
        read -p "(V)iew or (E)dit? " answer
        case "$answer" in
            v|V)
                _AssocAddOne "$db" "$prog" "v" "$fileext"
                _AssocRun "$db" "$file"
                return
                ;;
            e|E)
                _AssocAddOne "$db" "$prog" "e" "$fileext"
                _AssocRun "$db" "$file"
                return
                ;;
        esac
    done
}

_AssocAddOne()
{
    local db="$1"
    local prog="$2"
    local view="$3"    # e or v
    local ext="$4"
    local prog2

    while [ "$ext" = "" ] ; do
        printf2 "Give filename extension: "
        read ext
    done
    while true ; do
        case "$(_AssocProgExist "$prog")" in
            "[unknown]")
                #echo2 "You need to give an existing program name." ;;
                echo2 "Program '$prog' does not exist, ignored."
                return 1
                ;;
            "") ;;
            *) break ;;
        esac
        printf2 "Give program (and possible options): "
        read prog
    done

    # special associations:
    case "$ext" in
        "[extensionless]")
            export ASSOC_PROG_FOR_EXTLESS="$prog"
            ;;
        "[other]")
            ASSOC_GENERAL_OPENER="$prog"
            ;;
    esac

    echo2 "Associating '$prog' with '$ext' ($(test "$view" = "e" && echo edit || echo view))."

    printf "%s:%s:%s\n" "$view" "$ext" "$prog" >> "$db"     # db format

    # todo: don't let db grow too much (fortunately it grows very slowly)
}

_AssocBest()
{
    local db="$1"
    local ext="$2"
    local ve="$3"      # (v)iew or (e)dit
    local prog="$4"

    case "$(_AssocProgExist "$prog")" in
        ""|"[unknown]")
            return 1
            ;;
        *)
            _AssocAddOne "$db" "$prog" "$ve" "$ext"
            return $?
            ;;
    esac
}

_AssocAddBest()
{
    # associate best (first in list and exists) app for ext
    local db="$1"
    local exts="$2"   # comma separated list; no spaces around commas, but inside words yes!
    local ve="$3"     # (v)iew or (e)dit
    local progs="$4"  # comma separated list

    local ext prog
    local exts_failed found

    _list2array "$exts"
    exts=("${MAPFILE[@]}")

    _list2array "$progs"
    progs=("${MAPFILE[@]}")

    for ext in "${exts[@]}"
    do
        found=0
        for prog in "${progs[@]}"
        do
            _AssocBest "$db" "$ext" "$ve" "$prog"
            if [ $? -eq 0 ] ; then
                found=1
                break
            fi
        done
        if [ $found -eq 0 ] ; then
            echo2 "Cannot associate '$ext' with any given program."
            test -z "$exts_failed" && exts_failed="$ext" || exts_failed+=",$ext"
        fi
    done
    echo "$exts_failed"
}

# db format:     e|v:ext:prog
# where
#   v        view
#   e        edit
#   ext      extension
#   prog     program

_AssocSqueeze1()
{
    local db="$1"
    local db2="$db".tmp
    local line

    rm -f "$db2"

    while read line
    do
        head=${line%:*}
        grep "$head:" "$db" | tail -n 1 >> "$db2"
    done
    sort "$db2" | uniq > "$db"
    rm -f "$db2"
}
_AssocSqueeze()
{
    local db="$1"
    cat "$db" | _AssocSqueeze1 "$db"
}

_AssocRun()
{
    local db="$1"
    local file              # mytest.txt
    local fileext           # txt
    local assocline         # last assoc def for ext in db
    local assoclinev assoclinee
    local prog
    local x
    local grep
    local answer
    local mode
    
    case "$2" in
        -rv) mode=v ; shift ;;
        -re) mode=e ; shift ;;
    esac

    if [ "$2" = "" ] ; then
        _AssocUsage
        return 1
    fi

    case "$ASSOC_CASE_SENSITIVE" in
        no|disabled|disallowed|false|0)  grep="grep -i" ;;
        yes|enabled|allowed|true|1)      grep="grep"    ;;
    esac

    shift

    for x in "$@"
    do
        file="$x"
        fileext=${file##*.}
        Debugln "file = '$file'"
        Debugln "fileext = '$fileext'"
        if [ "$fileext" = "" ] ; then
            prog="$ASSOC_PROG_FOR_EXTLESS"
        else
            # if you have both edit and view programs associated, find out which to use
            assoclinee=`$grep "e:$fileext:" "$db" | $grep -w "$fileext" | tail -n 1`
            assoclinev=`$grep "v:$fileext:" "$db" | $grep -w "$fileext" | tail -n 1`
            Debugln "assoclinee = '$assoclinee'"
            Debugln "assoclinev = '$assoclinev'"
            if [ "$assoclinee" != "" -a "$assoclinev" != "" ] ; then
                case "$mode" in
                    e) assocline="$assoclinee" ;;
                    v) assocline="$assoclinev" ;;
                    *)
                        while true
                        do
                            read -p "$file: (E)dit or (V)iew? " answer
                            case "$answer" in
                                "e"|"E")
                                    assocline="$assoclinee"
                                    break
                                    ;;
                                "v"|"V")
                                    assocline="$assoclinev"
                                    break
                                    ;;
                            esac
                        done
                        ;;
                esac
            else
                if [ "$assoclinee" != "" ] ; then
                    assocline="$assoclinee"
                elif [ "$assoclinev" != "" ] ; then
                    assocline="$assoclinev"
                fi
            fi

            if [ "$assocline" != "" ] ; then
                prog=${assocline#*:*:}  # $prog should already be an existing program
            else
                # Unknown extension detected.
                # Use general opener or ask.

                if [ "$ASSOC_GENERAL_OPENER" = "" ] ; then
                    _AssocAsk "$db" "$fileext" "$file"
                    continue
                fi
                prog="$ASSOC_GENERAL_OPENER"
            fi
        fi
        #printfd "fileext = $fileext\n"
        #printfd "assocline = $assocline\n"

        echo2 "$prog $file"

        case "$prog" in
            less|most|more)
                # run these in foreground
                command $prog "$file" 2>/dev/null
                ;;
            *)
                # run these in background
                command $prog "$file" 2>/dev/null &
                ;;
        esac

    done
}

_AssocList()
{
    local db="$1"
    cat "$db"
    echo2 ""
    printf2 "For extensionless files: %s\n" "$ASSOC_PROG_FOR_EXTLESS"
    printf2 "For other files: %s\n" "$ASSOC_GENERAL_OPENER"
    echo2 ""
}

_AssocAddView()
{
    local db="$1"
    local prog="$2"
    shift 2
    _AssocAdd "$db" "$prog" v "$@"
}

_AssocAddEdit()
{
    local db="$1"
    local prog="$2"
    shift 2
    _AssocAdd "$db" "$prog" e "$@"
}

_AssocAdd()
{
    if [ "$3" = "" ] ; then
        echo2 "Error in $FUNCNAME: too few parameters."
        return 1
    fi
    local db="$1"
    local prog="$2"
    local view="$3"
    local ending

    shift 3

    for ending in "$@"
    do
        _AssocAddOne "$db" "$prog" "$view" "$ending"
    done
}

_AssocInit()
{
    
    local db="$1"
    local opt="$2"
    local end

    if [ "$EDITOR" = "" ] ; then
        export EDITOR="emacs"
    fi
    if [ "$SYSOPEN" = "" ] ; then
        export SYSOPEN="exo-open"
    fi

    if [ "$ASSOC_PROG_FOR_EXTLESS" = "" ] ; then
        export ASSOC_PROG_FOR_EXTLESS="$EDITOR"
    fi
    if [ "$ASSOC_CASE_SENSITIVE" = "" ] ; then
        export ASSOC_CASE_SENSITIVE="no"            # yes or no
    fi
    if [ "$ASSOC_GENERAL_OPENER" = "" ] ; then
        ASSOC_GENERAL_OPENER="$SYSOPEN"
    fi
    
    if [ ! -e "$db" ] ; then
        mkdir -p `dirname "$db"`
        touch "$db"
    fi

    if [ "$opt" = "reset" ] ; then
        rm -f "$db"

        # Examples of useful associations.
        local my failed

        if [ "$MY_TEXT_EDITORS" != "" ] ; then
            my="$MY_TEXT_EDITORS,"
        fi

        failed+=$(_AssocAddBest "$db" txt,ini            e  "${my}geany,notepadqq,emacs,qtcreator -client,mousepad,kate,gedit,pluma,kwrite,leafpad,adie,exo-open")
        failed+=$(_AssocAddBest "$db" asn                e  "${my}adie,geany,notepadqq,emacs,qtcreator -client,mousepad,kate,gedit,kwrite,leafpad,exo-open")
        failed+=$(_AssocAddBest "$db" "bash,bashrc,sh"   e  "${my}geany,notepadqq,emacs,qtcreator -client,mousepad,kate,gedit,kwrite,leafpad,adie,exo-open")
        failed+=$(_AssocAddBest "$db" "c,cpp,c++,h,hpp"  e  "qtcreator -client,geany,emacs,atom,mousepad,kate,gedit,kwrite,leafpad,exo-open")
        failed+=$(_AssocAddBest "$db" pro                e  "qtcreator")

        failed+=$(_AssocAddBest "$db" "bash,txt"         v  most,less,more)

        _AssocAddEdit "$db" "libreoffice"      html htm   # to EDIT html files

        _AssocAddView "$db" "firefox"          html htm   # to VIEW html files
        _AssocAddView "$db" mpv                mp4

        if [ "$failed" != "" ] ; then
            echo "Cannot associate extensions: $failed"
        fi


        # Extension not assigned here should work ok by the system.

        if [ 1 -eq 0 ] ; then
            # these should work fine by default...
            _AssocAdd "$db" "$ASSOC_GENERAL_OPENER" pdf odt ods doc docx xls xlsx zip
        fi
    fi
}

_list2array()  # puts values of the list into the (global) array MAPFILE
{
    local list="$1"
    local tmpfile=/tmp/assoc-$$

    echo "$list" | tr ',' '\n' > $tmpfile
    readarray -t < $tmpfile
    rm -f $tmpfile
}

assoc()
{
    # This is the main function.

    local opt
    local db="$ASSOC_DB"
    local ASSOC_CMD="${FUNCNAME[0]}"
    local tmpfile

    if [ "$db" = "" ] ; then
        db="$HOME/.config/assoc/db"
        #export ASSOC_DB="$db"
    fi

    _AssocInit "$db"

    for opt in "$@"   # these options must be first on the command line
    do
        case "$opt" in
            --text-editors=*)
                MY_TEXT_EDITORS="${opt:15}"
                shift
                ;;
            *)
                shift  # $opt is already taken from args
                break
                ;;
        esac
    done

    case "$opt" in
        -e)  _AssocAddEdit "$db" "$@" ;;
        -v)  _AssocAddView "$db" "$@" ;;
        -r)  _AssocRun     "$db" "$@" ;;
        -re) _AssocRun     "$db" -re "$@" ;;
        -rv) _AssocRun     "$db" -rv "$@" ;;
        -l)  _AssocList    "$db"      ;;
        -s)  _AssocSqueeze "$db"      ;;
        -i)  _AssocInit    "$db" reset  ;;
        *)   _AssocUsage   "$db" "$ASSOC_CMD" ;;
    esac
}

_AssocAbout()
{
    local db="$1"
    local version="$(ident "${BASH_SOURCE[0]}" | tail -n 1 | awk '{print $3}')"

}

_AssocUsage()
{
    local db="$1"
    local cmd="$2"
    local version="$(ident "${BASH_SOURCE[0]}" | tail -n 1 | awk '{print $3}')"

    echo2 "$cmd (version $version)"
    echo2 ""
    echo2 "Usage: $cmd option [file(s)]"
    echo2 ""
    echo2 "Options:"
    echo2 "-e | --edit    make an edit association between a program and an ending,"
    echo2 "               e.g. $cmd -e gedit txt"
    echo2 "-v | --view    make a  view association between a program and an ending,"
    echo2 "               e.g. $cmd -v less txt"
    echo2 "-r | --run     execute associated program(s) for file(s),"
    echo2 "               e.g. $cmd -r test.cpp test2.txt"
    echo2 "-l | --list    show all associations"
    echo2 "-s | --squeeze squeeze associations db, i.e. remove unnecessary old stuff"
    echo2 "-i | --init    reset database and add some useful associations"
    echo2 ""
    echo2 "$cmd database is in file $db."
    echo2 ""
    echo2 "For opening any type of files with one program, '$cmd' creates associations"
    echo2 "between programs and file endings."
    echo2 ""
    echo2 "Examples:"
    echo2 "    assoc -e mousepad txt"
    echo2 "    assoc -e \"qtcreator -client\" cpp"
    echo2 "After creating the associations above, you can open a .txt and .cpp file for editing with:"
    echo2 "    assoc -r test.txt another.cpp"
    echo2 ""
    echo2 "To make it a bit easier, you can create an alias (in bash):"
    echo2 "    alias o='assoc -r'"
    echo2 "so the previous command would simply be:"
    echo2 "    o test.txt another.cpp"
    echo2 ""
    echo2 "Note that '$cmd' is a bash function. To have it at your disposal,"
    echo2 "you must 'source' this file first e.g. in your ~/.bashrc."
    echo2 ""
    echo2 "About endings:"
    echo2 "an ending may also be:"
    echo2 "  [extensionless]   associates a program to files with no extension"
    echo2 "  [other]           associates a program to file extensions not in the database"
    echo2 ""
    echo2 "About the $cmd database of associations:"
    echo2 "you can edit the database manually. The format is simple:"
    echo2 "- Each line marks an association."
    echo2 "- Format of a line is:"
    echo2 "     x:ext:prog"
    echo2 "  where x is e (edit) or v (view), ext is the filename extension, and prog"
    echo2 "  (the rest of the line after colon) is the program that opens the file."
    echo2 "  Note that comments are not allowed."
    echo2 "- If you have several associations to an extension, only the one"
    echo2 "  nearest to the end of the database is used."
    echo2 ""
    echo2 "Note that if an association for an extension doesn't exist,"
    echo2 "assoc -r will ask it from the user."

    # Examples:
    # assoc -a adie txt
    # assoc -a "qtcreator -client" cpp
    # assoc -e test1.asn test2.bash
    # assoc -l
    # assoc -i

    #exit 1
}

alias o='assoc -r'   # general opener of any file (edit or view,  if associated)
alias e='assoc -re'  # opens any file in edit mode (if associated)
alias v='assoc -rv'  # opens any file in view mode (if associated)

if [ "$1" != "" ] ; then
    assoc "$@"
fi
